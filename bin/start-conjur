#!/usr/bin/env bash
set -euo pipefail

. ./utils.sh

trap teardown EXIT

function print_help() {
  echo "Usage: $0 [OPTION...]"
  echo " --conjur=STRING; Conjur version to run the tests against - currently supports \"v4\" and \"oss\" as options, defaults to \"oss\""
}

# Set defaults
export CONJUR_EDITION="oss"

# Read arguments
for arg in "$@"; do
  case $arg in
    --conjur=* )
      CONJUR_EDITION="${arg#*=}"
      shift
      ;;
    --conjur )
      echo "You must supply a Conjur version"
      print_help
      exit 1
      ;;
    * )
      echo "Unknown option: ${arg}"
      print_help
      exit 1
      ;;
    esac
done

if [[ "${CONJUR_EDITION}" != "oss" && "${CONJUR_EDITION}" != "v4" ]]; then
  echo "Unknown Conjur version: ${CONJUR_EDITION}"
  print_help
  exit 1
fi

function setup_conjur_oss() {
  announce "Waiting for conjur to start..."
  exec_on conjur-oss conjurctl wait
  echo "Done!"

  api_key=$(exec_on conjur-oss conjurctl role retrieve-key cucumber:user:admin | tr -d '\r')

  # Export values needed for tests to access Conjur instance
  export CONJUR_AUTHN_API_KEY="$api_key"
}

function setup_conjur_v4() {
  announce "Waiting for conjur to start..."
  exec_on conjur-v4 /opt/conjur/evoke/bin/wait_for_conjur
  echo "Done!"

  announce "Running cuke setup..."
  exec_on conjur-v4 bash -c 'conjur authn login -u admin -p secret'
  exec_on conjur-v4 conjur user create --as-group security_admin alice
  exec_on conjur-v4 conjur host create --as-group security_admin bob
  exec_on conjur-v4 conjur variable create existent-variable-with-undefined-value

  # These variables will be checked for during the go testing
  # For example, see conjurapi/variable_test.go
  vars=(
    'existent-variable-with-defined-value'
    'a/ b/c'
    'myapp-01'
    'alice@devops'
    'prod/aws/db-password'
    'research+development'
    'sales&marketing'
    'onemore'
  )

  secrets=(
    'existent-variable-defined-value'
    'a/ b/c'
    'these'
    'are'
    'all'
    'secret'
    'strings'
    '{"json": "object"}'
  )

  count=${#vars[@]}
  for ((i=0; i<$count; i++)); do
    id="${vars[$i]}"
    val="${secrets[$i]}"
    exec_on conjur-v4 conjur variable create "$id"
    exec_on conjur-v4 conjur variable values add "$id" "$val"
  done

  api_key_v4=$(exec_on conjur-v4 conjur user rotate_api_key)
  ssl_cert_v4=$(exec_on conjur-v4 cat /opt/conjur/etc/ssl/ca.pem)

  echo "Done!"

  # Export values needed for tests to access Conjur instance
  export CONJUR_V4_AUTHN_API_KEY="$api_key_v4"
  export CONJUR_V4_SSL_CERTIFICATE="$ssl_cert_v4"
}

main() {

  announce "Pulling images..."
  docker-compose \
    -p "${COMPOSE_PROJECT_NAME}" \
    pull "conjur-${CONJUR_EDITION}" "postgres" "cli"
  echo "Done!"

  announce "Building images..."
  docker-compose \
    -p "${COMPOSE_PROJECT_NAME}" \
    build "conjur-${CONJUR_EDITION}" "postgres"
  echo "Done!"

  announce "Starting Conjur environment..."
  export CONJUR_DATA_KEY="$(docker run -it cyberark/conjur data-key generate)"
  docker-compose \
    -p "${COMPOSE_PROJECT_NAME}" \
    up --no-deps -d "conjur-${CONJUR_EDITION}" "postgres"
  echo "Done!"

  if [[ "${CONJUR_EDITION}" == "oss" ]]; then
    setup_conjur_oss
  elif [[ "${CONJUR_EDITION}" == "v4" ]]; then
    setup_conjur_v4
  fi
}

main
